image: 996097627176.dkr.ecr.us-east-1.amazonaws.com/zapier/python-node:2024.06.10

stages:
  - install
  - validate
  - prod

variables:
  FF_USE_FASTZIP: 1 # increase archiving and extraction performance
  CYPRESS_CACHE_FOLDER: $CI_PROJECT_DIR/cache/Cypress
  SERVICE_PACKAGE: "@zapier/service"
  SERVICE_PACKAGE_PATH: "packages/service"

.run-only-on-staging:
  only:
    - staging

# Runs only on staging, and only if we're currently not in a deploy freeze.
# Read more on deploy freezes: https://docs.gitlab.com/ee/user/project/releases/index.html#prevent-unintentional-releases-by-setting-a-deploy-freeze
.run-only-on-non-frozen-staging:
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging" && $CI_DEPLOY_FREEZE == null'

.run-only-on-merge-requests:
  only:
    - merge_requests

.run-always:
  only:
    - main
    - staging
    - merge_requests

###############################################################################
# Install

.pnpm_cache:
  cache:
    key:
      files:
        - pnpm-lock.yaml
    policy: pull-push
    untracked: true
    paths:
      - node_modules

.use_pnpm_cache:
  extends: .pnpm_cache
  before_script:
    - make install
  cache:
    policy: pull

install:
  stage: install
  before_script:
    - npm config set '//registry.npmjs.org/:_authToken' "${NPM_TOKEN}"
  extends:
    - .pnpm_cache
    - .run-always
  script:
    - make install

###############################################################################
# Validate

.base_validate:
  extends:
    - .use_pnpm_cache
    - .run-always
  stage: validate

docs:
  extends: .run-always
  stage: validate
  image: 996097627176.dkr.ecr.us-east-1.amazonaws.com/zapier/sphinx:2023.09.26
  script:
    - cd docs
    - ln -sf ../README.md readme.md
    - ln -sf ../CONTRIBUTING.md contributing.md
    - ln -sf ../FEATURES.md features.md
    - sphinx-build . ./_build/html
  artifacts:
    paths:
      - docs/_build/html

lint:
  extends: .base_validate
  script: node_modules/.bin/turbo lint

typecheck:
  extends: .base_validate
  variables:
    RUN_IF: \.(js|tsx?)$|tsconfig.json$
  script: node_modules/.bin/turbo typecheck

test:
  extends: .base_validate
  variables:
    KUBERNETES_CPU_REQUEST: "4"
    KUBERNETES_MEMORY_REQUEST: "24Gi"
    KUBERNETES_MEMORY_LIMIT: "24Gi"
  script: make test

# New job to deploy to Vercel and wait for it to be ready
# .vercel-deploy:
#   extends:
#     - .use_pnpm_cache
#   stage: validate
#   before_script:
#     # Inherits 'make install' from .use_pnpm_cache
#     # Install vercel CLI globally
#     - npm install --global vercel@32.4.1
#   script:
#     - cd packages/service
#     # Get Vercel Project ID if not set
#     - |
#       if [ -z "${VERCEL_PROJECT_ID+exists}" ]; then
#       export VERCEL_PROJECT_ID=$(node -e "const https = require('https'); const options = { hostname: 'api.vercel.com', path: '/v9/projects/zhwdailysummarizer?teamId=$VERCEL_ORG_ID', method: 'GET', headers: { 'Authorization': 'Bearer $VERCEL_API_TOKEN' } }; const req = https.request(options, (res) => { let data = ''; res.on('data', (chunk) => { data += chunk; }); res.on('end', () => { const response = JSON.parse(data); const projectId = response.id; process.exitCode = 0; process.stdout.write(projectId); }); }); req.end();")
#       fi
#     # Find the Vercel deployment for the current commit/branch
#     - vercel list --token=$VERCEL_API_TOKEN --meta="gitlabCommitRef=$CI_COMMIT_REF_NAME" --yes --scope=zapier 2>&1 | tee vercelDeployments.txt
#     - export PREVIEW_URL=$(egrep -o '(http|https)://[^ ]+' vercelDeployments.txt | head -n 1)
#     # Wait for the deployment to be ready
#     - echo "Waiting for Vercel"
#     - vercel inspect $PREVIEW_URL -t $VERCEL_API_TOKEN --wait --scope=zapier
#     # Save the URL to an artifact
#     - echo $PREVIEW_URL > vercel_preview_url.txt
#   artifacts:
#     paths:
#       - packages/service/vercel_preview_url.txt
#     expire_in: 1 day

# vercel-deploy:review-lab:
#   extends:
#     - .vercel-deploy
#     - .run-only-on-merge-requests

# vercel-deploy:staging:
#   extends:
#     - .vercel-deploy
#     - .run-only-on-staging

###############################################################################
# Deploy

production:merge:
  # Only allow one merge to main at a time
  resource_group: merge
  stage: prod
  environment: production
  extends:
    - .run-only-on-non-frozen-staging
  before_script:
    # Setup git
    - apt-get install -y git
    # Configure git so we can push to our GitLab repository
    - git config --global user.name "GitLab Service Bot"
    - git config --global user.email service-gitlab@zapier.com
    - git config --global user.signingkey $GITLAB_TOKEN_GPG_FINGERPRINT
    - git config --global commit.gpgsign true
    - git config --global tag.gpgSign true
    - git remote set-url origin https://service-gitlab2:${GITLAB_ACCESS_TOKEN}@gitlab.com/$CI_PROJECT_NAMESPACE/zhwdailysummarizer.git
  script:
    # Fetch branches from remote
    - git fetch origin main $CI_COMMIT_REF_NAME
    # Switch to the branch this GitLab job is associated to (i.e. `staging`)
    - git checkout --track origin/$CI_COMMIT_REF_NAME

    # Merge branch into main & push
    - git checkout main
    - git reset --hard origin/main
    - git merge --no-ff $CI_COMMIT_REF_NAME
    - git push origin main

docs:upload:
  extends: .run-only-on-staging
  stage: prod
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  needs:
    - docs
  variables:
    BUCKET: zapier-pages-production
    REPOSITORY: zhwdailysummarizer
  script:
    - aws s3 sync docs/_build/html/ s3://${BUCKET}/docs/${REPOSITORY}
